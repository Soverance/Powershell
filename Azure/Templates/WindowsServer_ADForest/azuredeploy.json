// Â© 2017 BKV, Inc.
// Scott McCutchen
// www.soverance.com
// scott.mccutchen@soverance.com

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
	"vpnType": {
		"type": "string",
		"metadata": {
			"description": "Route based (Dynamic Gateway) or Policy based (Static Gateway)"
		},
		// We override this param to Policy Based because we connect to a Cisco MX100 on site, which does not support IKEv2 and therefore cannot use Route Based VPN.
		"defaultValue": "RouteBased",
		"allowedValues": [
			"RouteBased",
			"PolicyBased"
		]
	},
	"localGatewayName": {
		"type": "string",
		"defaultValue": "SOV-NET-LocalGateway",
		"metadata": {
			"description": "Arbitrary name for gateway resource representing your local/on-prem gateway"
		}
	},
	"localGatewayIpAddress": {
		"type": "string",
		"metadata": {
			"description": "Public IP of your local/on-prem gateway"
		}
	},
	"localAddressPrefix": {
		"type": "string",
		"metadata": {
			"description": "CIDR block representing the address space of your local/on-prem network's Subnet"
		}
	},
	"virtualNetworkName": {
		"type": "string",
		"defaultValue": "SOV-NET",
		"metadata": {
			"description": "Arbitrary name for the Azure Virtual Network"
		}
	},
	"virtualNetworkAddressRange": {
		"type": "string",
		"defaultValue": "10.0.0.0/16",
		"metadata": {
			"description": "CIDR block representing the address space of the Azure VNet"
		}
	},
	"subnetName": {
		"type": "string",
		"defaultValue": "SOV-NET-Subnet",
		"metadata": {
			"description": "Arbitrary name for the Azure Subnet"
		}
	},
	"subnetPrefix": {
		"type": "string",
		"metadata": {
			"description": "CIDR block for VM subnet, subset of azureVNetAddressPrefix address space"
		}
	},
	"gatewaySubnetPrefix": {
		"type": "string",
		"defaultValue": "10.0.1.0/29",
		"metadata": {
			"description": "CIDR block for gateway subnet, subset of azureVNetAddressPrefix address space"
		}
	},
	"gatewayPublicIPName": {
		"type": "string",
		"defaultValue": "SOV-NET-GatewayPublicIP",
		"metadata": {
			"description": "Arbitrary name for public IP resource used for the new azure gateway"
		}
	},
	"gatewayName": {
		"type": "string",
		"defaultValue": "SOV-NET-Gateway",
		"metadata": {
			"description": "Arbitrary name for the new gateway"
		}
	},
	"gatewaySku":{  
		"type":"string",
		"defaultValue": "Basic",
		"allowedValues": [
			"Basic",
			"Standard",
			"HighPerformance"
		],
		"metadata":{  
			"description":"The Sku of the Gateway. This must be one of Basic, Standard or HighPerformance."
		}
	},
	"connectionName": {
		"type": "string",
		"defaultValue": "SOV-NET-To-Local",
		"metadata": {
			"description": "Arbitrary name for the new connection between Azure VNet and other network"
		}
	},
	"sharedKey": {
		"type": "string",
		"metadata": {
			"description": "Shared key (PSK) for IPSec tunnel"
		}
	},
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "The name of the administrator account of the new VM and domain"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the administrator account of the new VM and domain"
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the Active Directory Domain to be created"
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "description": "The DNS prefix for the public IP address used by the Load Balancer"
      },
	  "defaultValue": "soverancestudios"
    },
	"pdcRDPPort": {
      "type": "int",
      "metadata": {
        "description": "The public RDP port for the PDC VM"
      },
      "defaultValue": 3389
    },
    "WEBRDPPort": {
      "type": "int",
      "metadata": {
        "description": "The public RDP port for the WEB VM"
      },
      "defaultValue": 3390
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The location of resources, such as templates and DSC modules, that the template depends on"
      },
	  "defaultValue": "https://raw.githubusercontent.com/Soverance/Powershell/master/Azure/Templates/WindowsServer_ADForest"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Auto-generated token to access _artifactsLocation"
      },
      "defaultValue": ""
    }
  },
  /////////////////////////////////////////////
  // VARIABLES
  "variables": {
    "storageAccountName": "soverancestudios",
	"storageAccountType": "Standard_LRS",
	"publicIPAddressName": "SOV-LB-PublicIP",
    "adAvailabilitySetName": "SOV-AvailabiltySet",
	"networkSecurityGroupName": "SOV-NET-SecurityGroup",
    "adLBName": "SOV-NET-LoadBalancer",
    "adLBFE": "SOV-NET-LBFE",
    "adLBBE": "SOV-NET-LBBE",
	"adLBProbe": "SOV-NET-LBProbe",
	"adLBRule80": "SOV-NET-LBRule-80",
    "adRDPNATPDC": "SOV-PDC-RDP",
	"adRDPNATWEB": "SOV-WEB-RDP",
	"adPERFORCENATPDC": "SOV-PDC-PERFORCE",
    "adPDCNicName": "SOV-PDC-NIC",
    "adPDCNicIPAddress": "10.0.0.4",
	"adWEBNicName": "SOV-WEB-NIC",
    "adWEBNicIPAddress": "10.0.0.5",
	"vnetID": "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]",
	"gatewaySubnetRef": "[concat(variables('vnetID'),'/subnets/','GatewaySubnet')]",
    "adPDCVMName": "SOV-PDC",
	"adWEBVMName": "SOV-WEB",
	"adVMSize": "Standard_A1_v2",
	"imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "imageSKU": "2016-Datacenter",
	"adPDCOSDisk": "PDC-OSDisk",
    "adWEBOSDisk": "WEB-OSDisk",
	"adPDCDataDisk": "PDC-DataDisk",
    "adWEBDataDisk": "WEB-DataDisk",
    "adDataDiskSize": 1000,
	"vnetTemplateUri": "[concat(parameters('_artifactsLocation'),'/nestedtemplates/vnet.json', parameters('_artifactsLocationSasToken'))]",
    "nicTemplateUri": "[concat(parameters('_artifactsLocation'),'/nestedtemplates/nic.json', parameters('_artifactsLocationSasToken'))]",
    "vnetwithDNSTemplateUri": "[concat(parameters('_artifactsLocation'),'/nestedtemplates/vnet-with-dns-server.json', parameters('_artifactsLocationSasToken'))]",
    "configureADWEBTemplateUri": "[concat(parameters('_artifactsLocation'),'/nestedtemplates/configureADWEB.json', parameters('_artifactsLocationSasToken'))]",
    "adPDCModulesURL": "[concat(parameters('_artifactsLocation'),'/DSC/CreateADPDC.zip', parameters('_artifactsLocationSasToken'))]",
    "adPDCConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
    "adWEBPreparationModulesURL": "[concat(parameters('_artifactsLocation'),'/DSC/PrepareADWEB.zip', parameters('_artifactsLocationSasToken'))]",
    "adWEBPreparationFunction": "PrepareADWEB.ps1\\PrepareADWEB",
    "adWEBConfigurationModulesURL": "[concat(parameters('_artifactsLocation'),'/DSC/ConfigureADWEB.zip', parameters('_artifactsLocationSasToken'))]",
    "adWEBConfigurationFunction": "ConfigureADWEB.ps1\\ConfigureADWEB"    
  },
  /////////////////////////////////////////////
  // RESOURCES
  "resources": [
	// STORAGE ACCOUNT
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name":"[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "properties": {}
    },
	// NETWORK SECURITY GROUP
	{
	  "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "RDP",
            "properties": {
              "description": "Allows RDP connections.",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
             "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
		  {
            "name": "FTP",
            "properties": {
              "description": "Allows standard FTP connections.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "21",
             "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1010,
              "direction": "Inbound"
            }
          },
		  {
            "name": "FTP-Passive",
            "properties": {
              "description": "Allows passive FTP connections.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "1041-1045",
             "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1020,
              "direction": "Inbound"
            }
          },
		  {
            "name": "HTTP",
            "properties": {
              "description": "Allows HTTP connections.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
             "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1030,
              "direction": "Inbound"
            }
          },
		  {
            "name": "HTTPS",
            "properties": {
              "description": "Allows HTTPS connections.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
             "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1040,
              "direction": "Inbound"
            }
          },
		  {
            "name": "PERFORCE",
            "properties": {
              "description": "Allows Perforce connections.",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "1666",
             "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1050,
              "direction": "Inbound"
            }
          },
		  {
            "name": "AllowVNetInBound",
            "properties": {
              "description": "Allows connections through the virtual network.",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
             "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 2000,
              "direction": "Inbound"
            }
          },
		  {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allows connections through the load balancer.",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
             "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 2001,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
	// PUBLIC IP for GATEWAY  
	{
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[parameters('gatewayPublicIPName')]",
      "location": "[resourceGroup().location]",
	  "dependsOn": [
	    "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
	  ],
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
      }
    },
	// PUBLIC IP for LOAD BALANCER
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
	  "dependsOn": [
	    "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
	  ],
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('dnsPrefix')]"
        }
      }
    },
	// AVAILABILITY SET
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('adAvailabilitySetName')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
	// VIRTUAL NETWORK
    {
      "type": "Microsoft.Resources/deployments",
      "name": "[parameters('virtualNetworkName')]",
      "apiVersion": "2016-02-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/vnet.json', parameters('_artifactsLocationSasToken'))]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subnetRange": {
            "value": "[parameters('subnetPrefix')]"
          },
		  "gatewaySubnetPrefix": {
            "value": "[parameters('gatewaySubnetPrefix')]"
          },
		  "networkSecurityGroupName": {
            "value": "[variables('networkSecurityGroupName')]"
          }
        }
      }
    },
	// VIRTUAL NETWORK GATEWAY
	{
	  "apiVersion": "2015-06-15",
	  "type": "Microsoft.Network/virtualNetworkGateways",
	  "name": "[parameters('gatewayName')]",
	  "location": "[resourceGroup().location]",
	  "dependsOn": [
	    "[concat('Microsoft.Network/publicIPAddresses/', parameters('gatewayPublicIPName'))]",
	    "[concat('Microsoft.Resources/deployments/', parameters('virtualNetworkName'))]"
	  ],
	  "properties": {
	    "ipConfigurations": [
		  {
		    "properties": {
			  "privateIPAllocationMethod": "Dynamic",
			  "subnet": {
			    "id": "[variables('gatewaySubnetRef')]"
			  },
			  "publicIPAddress": {
			    "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('gatewayPublicIPName'))]"
			  }
		    },
		    "name": "vnetGatewayConfig"
		  }
	    ],
	    "sku": {
		  "name": "[parameters('gatewaySku')]",
		  "tier": "[parameters('gatewaySku')]"
	    },
	    "gatewayType": "Vpn",
	    "vpnType": "[parameters('vpnType')]",
	    "enableBgp": "false"
	  }
	},
	// LOCAL GATEWAY
	{
      "apiVersion": "2016-08-01",
      "type": "Microsoft.Network/localNetworkGateways",
      "name": "[parameters('localGatewayName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "localNetworkAddressSpace": {
          "addressPrefixes": [
            "[parameters('localAddressPrefix')]"
          ]
        },
        "gatewayIpAddress": "[parameters('localGatewayIpAddress')]"
      }
    },
	// AZURE CONNECTION TO LOCAL FIREWALL
    {
      "apiVersion": "2015-06-15",
      "name": "[parameters('connectionName')]",
      "type": "Microsoft.Network/connections",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworkGateways/', parameters('gatewayName'))]",
        "[concat('Microsoft.Network/localNetworkGateways/', parameters('localGatewayName'))]"
      ],
      "properties": {
        "virtualNetworkGateway1": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', parameters('gatewayName'))]"
        },
        "localNetworkGateway2": {
          "id": "[resourceId('Microsoft.Network/localNetworkGateways', parameters('localGatewayName'))]"
        },
        "connectionType": "IPsec",
        "routingWeight": 10,
        "sharedKey": "[parameters('sharedKey')]"
      }
    },
	// LOAD BALANCER
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('adLBName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
      ],
      "properties": {
		"frontendIPConfigurations": [
          {
            "name": "[variables('adLBFE')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],		
        "backendAddressPools": [
          {
            "name": "[variables('adLBBE')]"
          }
        ],
        "inboundNatRules": [
          {
            "name": "[variables('adRDPNATPDC')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('adLBName'), variables('adLBFE'))]"
              },
              "protocol": "tcp",
              "frontendPort": "[parameters('pdcRDPPort')]",
              "backendPort": 3389,
              "enableFloatingIP": false
            }
          },
		  {
		    "name": "[variables('adRDPNATWEB')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('adLBName'), variables('adLBFE'))]"
              },
              "protocol": "tcp",
              "frontendPort": "[parameters('WEBRDPPort')]",
              "backendPort": 3389,
              "enableFloatingIP": false
            }
		  },
		  {
		    "name": "[variables('adPERFORCENATPDC')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('adLBName'), variables('adLBFE'))]"
              },
              "protocol": "tcp",
              "frontendPort": 1666,
              "backendPort": 1666,
              "enableFloatingIP": false
            }
		  }
        ]
      }
    },
	
	// NETWORK INTERFACE - Primary Domain Controller
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('adPDCNicName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments/', parameters('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/loadBalancers/', variables('adLBName'))]",
		    "[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
		"networkSecurityGroup": {
		  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
		},
        "ipConfigurations": [
          {
            "name": "ipconfigPDC",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('adPDCNicIPAddress')]",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
              },			  
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('adLBName'), variables('adLBBE'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules', variables('adLBName'), variables('adRDPNATPDC'))]",
				          "id0": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules', variables('adLBName'), variables('adPERFORCENATPDC'))]"
                }
              ]
            }
          }
        ]
      }
    },
	// NETWORK INTERFACE - Backup Domain Controller
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('adWEBNicName')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments/', parameters('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/loadBalancers/', variables('adLBName'))]",
		"[resourceId('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
		"networkSecurityGroup": {
		  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
		},
        "ipConfigurations": [
          {
            "name": "ipconfigWEB",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[variables('adWEBNicIPAddress')]",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
              },			  
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('adLBName'), variables('adLBBE'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules', variables('adLBName'), variables('adRDPNATWEB'))]"
                }
              ]
            }
          }
        ]
      }
    },
	// VIRTUAL MACHINE - Primary Domain Controller
	{
	  "name": "[variables('adPDCVMName')]",
	  "type": "Microsoft.Compute/virtualMachines",
	  "apiVersion": "2015-06-15",
	  "location": "[resourceGroup().location]",
	  "dependsOn": [
		"[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
		"[resourceId('Microsoft.Network/networkInterfaces',variables('adPDCNicName'))]",
		"[resourceId('Microsoft.Compute/availabilitySets', variables('adAvailabilitySetName'))]",
		"[resourceId('Microsoft.Network/loadBalancers',variables('adLBName'))]"
	  ],
	  "properties": {
		"hardwareProfile": {
		  "vmSize": "[variables('adVMSize')]"
		},
		"availabilitySet": {
		  "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('adAvailabilitySetName'))]"
		},
		"osProfile": {
		  "computerName": "[variables('adPDCVMName')]",
		  "adminUsername": "[parameters('adminUsername')]",
		  "adminPassword": "[parameters('adminPassword')]"
		},
		"storageProfile": {
		  "imageReference": {
			"publisher": "[variables('imagePublisher')]",
			"offer": "[variables('imageOffer')]",
			"sku": "[variables('imageSKU')]",
			"version": "latest"
		  },
		  "osDisk": {
			"name": "osdisk",
			"vhd": {
			  "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob,'vhds/', variables('adPDCOSDisk'),'.vhd')]"
			},
			"caching": "ReadWrite",
			"createOption": "FromImage"
		  },
		  "dataDisks": [
			{
			  "vhd": {
				"uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob,'vhds/', variables('adPDCDataDisk'),'.vhd')]"
			  },
			  "name": "[concat(variables('adPDCVMName'),'-DATA')]",
			  "caching": "None",
			  "diskSizeGB": "[variables('adDataDiskSize')]",
			  "lun": 0,
			  "createOption": "Empty"
			}
		  ]
		},
		"networkProfile": {
		  "networkInterfaces": [
			{
			  "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('adPDCNicName'))]"
			}
		  ]
		}
	  },
	  "resources": [
		{
		  "name": "CreateADForest",
		  "type": "extensions",
		  "apiVersion": "2016-03-30",
		  "location": "[resourceGroup().location]",
		  "dependsOn": [
			"[resourceId('Microsoft.Compute/virtualMachines', variables('adPDCVMName'))]"
		  ],
		  "properties": {
			"publisher": "Microsoft.Powershell",
			"type": "DSC",
			"typeHandlerVersion": "2.19",
			"autoUpgradeMinorVersion": true,
			"settings": {
			  "ModulesUrl": "[variables('adPDCModulesURL')]",
			  "ConfigurationFunction": "[variables('adPDCConfigurationFunction')]",
			  "Properties": {
				"DomainName": "[parameters('domainName')]",
				"AdminCreds": {
				  "UserName": "[parameters('adminUserName')]",
				  "Password": "PrivateSettingsRef:AdminPassword"
				}
			  }
			},
			"protectedSettings": {
			  "Items": {
				"AdminPassword": "[parameters('adminPassword')]"
			  }
			}
		  }
		}
	  ]
    },
	// UPDATE VIRTUAL NETWORK
	{
      "name": "UpdateVNetDNS1",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('adPDCVMName'),'/extensions/CreateADForest')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vnetwithDNSTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subnetRange": {
            "value": "[parameters('subnetPrefix')]"
          },
		  "gatewaySubnetPrefix": {
            "value": "[parameters('gatewaySubnetPrefix')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('adPDCNicIPAddress')]"
            ]
          },
		  "networkSecurityGroupName": {
            "value": "[variables('networkSecurityGroupName')]"
          }
        }
      }
    },
	// UPDATE WEB NETWORK INTERFACE
    {
      "name": "UpdateWEBNIC",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/',variables('adWEBNicName'))]",
        "Microsoft.Resources/deployments/UpdateVNetDNS1"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('nicTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[variables('adWEBNicName')]"
          },
          "ipConfigurations": {
            "value": [
              {
                "name": "ipconfigWEB",
                "properties": {
                  "privateIPAllocationMethod": "Static",
                  "privateIPAddress": "[variables('adWEBNicIPAddress')]",
                  "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]"
                  },
                  "loadBalancerBackendAddressPools": [
                    {
                      "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('adLBName'), variables('adLBBE'))]"
                    }
                  ],
                  "loadBalancerInboundNatRules": [
                    {
                      "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatRules', variables('adLBName'), variables('adRDPNATWEB'))]"
                    }
                  ]
                }
              }
            ]
          },
          "dnsServers": {
            "value": [
              "[variables('adPDCNicIPAddress')]"
            ]
          }
        }
      }
    },
	// VIRTUAL MACHINE - Backup Domain Controller
	{
      "name": "[variables('adWEBVMName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces',variables('adWEBNicName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('adAvailabilitySetName'))]",
        "[resourceId('Microsoft.Network/loadBalancers',variables('adLBName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('adVMSize')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('adAvailabilitySetName'))]"
        },
        "osProfile": {
          "computerName": "[variables('adWEBVMName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob,'vhds/', variables('adWEBOSDisk'),'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "vhd": {
                "uri": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob,'vhds/', variables('adWEBDataDisk'),'.vhd')]"
              },
              "name": "[concat(variables('adWEBVMName'),'-DATA')]",
              "caching": "None",
              "diskSizeGB": "[variables('adDataDiskSize')]",
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('adWEBNicName'))]"
            }
          ]
        }
      }
    },
	// Prepare WEB for connection to PDC
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('adWEBVMName'),'/PrepareWEB')]",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('adWEBVMName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.19",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "ModulesUrl": "[variables('adWEBPreparationModulesURL')]",
          "ConfigurationFunction": "[variables('adWEBPreparationFunction')]",
          "Properties": {
            "DNSServer": "[variables('adPDCNicIPAddress')]"
          }
        }
      }
    },
	// Configure Backup Domain Controller
    {
      "name": "ConfiguringBackupADDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/',variables('adWEBVMName'),'/extensions/PrepareWEB')]",
        "Microsoft.Resources/deployments/UpdateWEBNIC"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('configureADWEBTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "adWEBVMName": {
            "value": "[variables('adWEBVMName')]"
          },
          "location": {
            "value": "[resourceGroup().location]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adWEBConfigurationFunction": {
            "value": "[variables('adWEBConfigurationFunction')]"
          },
          "adWEBConfigurationModulesURL": {
            "value": "[variables('adWEBConfigurationModulesURL')]"
          }
        }
      }
    },
	// Update Virtual Network with final DNS settings
    {
      "name": "UpdateVNetDNS2",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2016-09-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/ConfiguringBackupADDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vnetwithDNSTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressRange": {
            "value": "[parameters('virtualNetworkAddressRange')]"
          },
          "subnetName": {
            "value": "[parameters('subnetName')]"
          },
          "subnetRange": {
            "value": "[parameters('subnetPrefix')]"
          },
		  "gatewaySubnetPrefix": {
            "value": "[parameters('gatewaySubnetPrefix')]"
          },
          "DNSServerAddress": {
            "value": [
              "[variables('adPDCNicIPAddress')]",
              "[variables('adWEBNicIPAddress')]"
            ]
          },
		  "networkSecurityGroupName": {
            "value": "[variables('networkSecurityGroupName')]"
          }
        }
      }
    }
  ]
}